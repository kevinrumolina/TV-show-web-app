{"version":3,"sources":["components/Film.tsx","components/BackButton.tsx","components/SimilarFilm.tsx","components/Detail.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Film","name","id","backdrop_path","vote_average","title","poster_path","imageType","sectionFetcher","to","document","location","pathname","includes","className","src","alt","BackButton","width","height","x","y","viewBox","xmlns","d","fill","SimilarFilm","path","useState","similarFilms","setSimilarFilms","useEffect","fetch","then","response","json","console","log","results","length","map","film","Detail","details","setDetails","overview","sectionNames","sectionUrl","App","section","setSection","handleChange","event","updatedValue","target","getAttribute","films","setFilms","indexOf","sectionConverter","type","value","onChange","htmlFor","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aad806a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst imageUri = 'https://www.themoviedb.org/t/p/w533_and_h300_bestv2';\nconst imagePoster = 'https://image.tmdb.org/t/p/w185';\n\ninterface Props {\n    name: string,\n    id: number,\n    backdrop_path: string,\n    vote_average: number,\n    title: string,\n    poster_path: string\n}\n\nexport const Film: React.FC<Props> = ({ name, id, backdrop_path, vote_average, title, poster_path }) => {\n    const imageType = backdrop_path ? 'backdrop' : 'poster';\n\n    const sectionFetcher = name ? 'tv' : 'movie';\n\n    return (\n        <Link to={document.location.pathname.includes(sectionFetcher) ? '/' + sectionFetcher + '/' + id : sectionFetcher + '/' + id}>\n        <article className=\"film\" id={`${id}`} >\n            <img className={`film-image ${imageType}`} \n                src={backdrop_path ? `${imageUri}${backdrop_path}` : `${imagePoster}${poster_path}`} \n                alt={name || title} />\n            <div>\n                <h2 className=\"film-title\">{name || title}</h2>\n                <p className=\"film-votes\">{vote_average}</p>\n            </div>\n        </article>\n        </Link>\n    )\n}","import { Link } from \"react-router-dom\";\n\nexport const BackButton = () => {\n\n    return (\n        <div className=\"back-button\">\n            <Link to=\"/\">\n            <svg width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 512 512\"><g><path xmlns=\"http://www.w3.org/2000/svg\" d=\"m498.195312 222.695312c-.011718-.011718-.023437-.023437-.035156-.035156l-208.855468-208.847656c-8.902344-8.90625-20.738282-13.8125-33.328126-13.8125-12.589843 0-24.425781 4.902344-33.332031 13.808594l-208.746093 208.742187c-.070313.070313-.140626.144531-.210938.214844-18.28125 18.386719-18.25 48.21875.089844 66.558594 8.378906 8.382812 19.445312 13.238281 31.277344 13.746093.480468.046876.964843.070313 1.453124.070313h8.324219v153.699219c0 30.414062 24.746094 55.160156 55.167969 55.160156h81.710938c8.28125 0 15-6.714844 15-15v-120.5c0-13.878906 11.289062-25.167969 25.167968-25.167969h48.195313c13.878906 0 25.167969 11.289063 25.167969 25.167969v120.5c0 8.285156 6.714843 15 15 15h81.710937c30.421875 0 55.167969-24.746094 55.167969-55.160156v-153.699219h7.71875c12.585937 0 24.421875-4.902344 33.332031-13.808594 18.359375-18.371093 18.367187-48.253906.023437-66.636719zm0 0\" fill=\"#ffffff\" data-original=\"#000000\"></path></g></svg>\n            </Link>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { Film } from './Film';\n\nconst apiUrl = 'https://api.themoviedb.org/3';\nconst apiKey = 'a562a9a87fddcafca2a9c4dd28aaea99';\n\nexport const SimilarFilm = () => {\n    const path = document.location.pathname;\n\n    const [similarFilms, setSimilarFilms] = useState<any[any]>([]);\n\n    useEffect(() => {\n        fetch(`${apiUrl}${path}/similar?api_key=${apiKey}`)\n        .then(response => response.json())\n        .then(response => {\n            console.log(response.results)\n            setSimilarFilms(response.results)\n        })\n    }, [path])\n\n    return (\n        <section className=\"similar-films\">\n            <h2 className=\"similar-films__title\">Similar Films</h2>\n            <div className=\"section similar-films__container\">\n                {similarFilms.length > 0 && similarFilms.map((film:any) =>\n                    <Film key={film.id} {...film} />\n                )}\n            </div>\n        </section>\n        \n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { BackButton } from './BackButton';\nimport { SimilarFilm } from './SimilarFilm';\n\nconst apiUrl = 'https://api.themoviedb.org/3';\nconst apiKey = 'a562a9a87fddcafca2a9c4dd28aaea99';\nconst imageUri = 'https://www.themoviedb.org/t/p/w533_and_h300_bestv2/';\nconst imagePoster = 'https://image.tmdb.org/t/p/w185/';\n\nexport const Detail = () => {\n    const path = document.location.pathname;\n\n    const sectionFetcher = path.includes('tv') ? 'tv' : 'movie';\n    \n    const [details, setDetails] = useState<any[any]>([]);\n\n    useEffect(() => {\n        fetch(`${apiUrl}${path}?api_key=${apiKey}`)\n        .then(response => response.json())\n        .then(response => {\n            console.log(response)\n            setDetails(response)\n        })\n    }, [path, sectionFetcher])\n\n    return (\n        <main >\n            <BackButton />\n            <div className=\"film detail\">\n                <img className={`film-image`} \n                    src={details.backdrop_path ?  `${imageUri}${details.backdrop_path}` : `${imagePoster}${details.poster_path}`}\n                    alt={details.name || details.title} />\n                <div>\n                    <h2 className=\"film-title\">{details.name || details.title}</h2>\n                    <p className=\"film-votes\">{details.vote_average}</p>\n                </div>\n                <p className=\"film-overview\">{details.overview}</p>\n            </div>\n            <SimilarFilm />\n        </main>\n    )\n}","import React, { useState, useEffect }  from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Film } from './components/Film';\nimport { Detail } from './components/Detail';\nimport './App.css';\n\nconst sectionNames = [\"tv shows\", \"movies\"];\nconst sectionUrl = [\"tv\", \"movie\"];\nconst apiUrl = 'https://api.themoviedb.org/3/';\nconst apiKey = 'a562a9a87fddcafca2a9c4dd28aaea99';\n\nconst sectionConverter = (section: string) => sectionUrl[sectionNames.indexOf(section)]\n\nfunction App() {\n  const [section, setSection] = useState('tv shows');\n\n  const handleChange = (event: any) => {\n    const updatedValue = event.target.getAttribute('value');\n\n    setSection(updatedValue);\n  }\n\n  const [films, setFilms] = useState<any[]>([]);\n\n  useEffect(() => {\n    fetch(`${apiUrl}${sectionConverter(section)}/popular?api_key=${apiKey}`)\n    .then(response => response.json())\n    .then(response => {\n      console.log(response.results)\n      setFilms(response.results)\n    })\n  }, [section])\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path={\"/tv/\" || \"/TV-show-web-app/tv/\"}>\n            <Detail />\n          </Route>\n          <Route path={\"/movie/\" || \"/TV-show-web-app/movie/\"}>\n            <Detail />\n          </Route>\n          <Route path=\"/\">\n          <header>\n            {sectionNames.map(name => (\n            <div className='menu-section' key={name}>\n              <input type=\"radio\" className=\"menu-section__input\" name=\"section\" value={name} id={name}\n                onChange={handleChange} />\n              <label htmlFor={name} className=\"menu-section__button\">\n                {name}\n              </label>\n            </div>\n            ))}\n            <h2 className=\"menu-section__title\">{section}</h2>\n          </header>\n          <main>\n            <section className=\"section\">\n              {films.length > 0 && films.map((film) =>\n              <Film key={film.id} {...film} />)}\n            </section>\n          </main>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}